DISPMAT[5,5] <- 1-DISP
DISPMAT[9, c(4,8,10,14)] <- DISP/4 # 9
DISPMAT[9,9] <- 1-DISP
DISPMAT[10, c(5,9,15)] <- DISP/3 # 10
DISPMAT[10,10] <- 1-DISP
DISPMAT[16, c(11,12,17,21,22)] <- DISP/5 # 16
DISPMAT[16,16] <- 1-DISP
DISPMAT[17, c(18,12)] <- DISP/2 # 17
DISPMAT[17,17] <- 1-DISP
DISPMAT[21, c(16,17,22)] <- DISP/3 # 21
DISPMAT[21,21] <- 1-DISP
DISPMAT[22, c(17,18,23)] <- DISP/3 #
DISPMAT[22,22] <- 1-DISP
## DISPMAT[, c(,,)] <- .2/3 #
## DISPMAT[,] <- 0.8
## DISPMAT[, c(,,)] <- .2/3 #
## DISPMAT[,] <- 0.8
## DISPMAT[, c(,,)] <- .2/3 #
## DISPMAT[,] <- 0.8
## DISPMAT[, c(,,)] <- .2/3 #
## DISPMAT[,] <- 0.8
DISPMAT <- prop.table(DISPMAT,1)
NBSIM <- 10
9
NBSAMP <- 10
SAMPSIZE <- 800
## SIMULATE DATA ##
for(simIdx in 1:NBSIM){
mySim <- list(ances=NA) # initialization
while(sum(!is.na(mySim$ances)) < 500){
## MAKE SIMULATION
mySim <- haploGen(seq.le=SEQLENGTH, Tmax=TMAX, mu=TXMUT,
mean.gen=GENTIME, sd.gen=GENTIME.SD,
mean.repr=REPRO, sd.repro=REPRO.SD,
max.nb=MAXNBSEQ, grid.size=5, matConnect=DISPMAT,
ini.n=INI.N, ini.xy=INI.XY)
} # end while
save(mySim, file=paste("sim.stru", simIdx, "RData", sep="."))
## GET SAMPLES
for(sampIdx in 1:NBSAMP){
mySamp <- sample.haploGen(mySim, SAMPSIZE, rDate=rpois,
arg.rDate=list(lambda=1))
fileName <- paste("sim.stru", simIdx, sampIdx, "RData", sep=".")
save(mySamp, file=fileName)
}
}
## TO VISUALIZE THE LATEST DATASET ##
plotHaploGen(mySamp)
## GET SAMPLES
for(sampIdx in 1:NBSAMP){
mySamp <- sample.haploGen(mySim, SAMPSIZE, rDate=rpois,
arg.rDate=list(lambda=1))
fileName <- paste("sim.stru", simIdx, sampIdx, "RData", sep=".")
save(mySamp, file=fileName)
}
library(helo = ape)
library(help = ape)
library(adegenet)
library(ape)
dat = read.csv(system.file("H1N1_time_location_data.csv",package="adegenet"))
ha  = read.dna(system.file("H1N1_HA_sequences.txt",package="adegenet"), format="fa")
na  = read.dna(system.file("H1N1_NA_sequences.txt",package="adegenet"), format="fa")
dat = read.csv("H1N1_time_location_data.csv",package="adegenet")
dat = read.csv("H1N1_time_location_data.csv") #,package="adegenet")
ha  = read.dna("H1N1_HA_sequences.txt", format="fa")
na  = read.dna("H1N1_NA_sequences.txt", format="fa")
## computing nucleotide distances
# to calculate raw pairwise genetic distances between isolates,
# ape package can be used (dist.dna)
nbNucleotide = ncol(as.matrix(ha)) + ncol(as.matrix(na))
distances = dist.dna(ha, model = "raw")*ncol(as.matrix(ha)) +
dist.dna(na, model = "raw")*ncol(as.matrix(na))
distances = round(as.matrix(distances))
## SEQTRACK!
mu1 = 0.00502/365
dat$date = as.POSIXct(dat$date)
results  = seqTrack(D, rownames(dat), dat$date, prox.mat=M, mu=mu1, haplo.le = nbNucleotide)
## Genetic likelihood
p = get.likelihood(results, mu=mu1, hapl.length=nbNucleotide)
results  = seqTrack(distances, rownames(dat), dat$date, prox.mat=M, mu=mu1, haplo.le = nbNucleotide)
## spatial connectivity matrix
xy = cbind(dat$lon, dat$lat)
temp = as.matrix(dist(xy))
## spatial connectivity matrix
xy = cbind(dat$lon, dat$lat)
temp = as.matrix(dist(xy))
temp = as.matrix(dist(xy))
## spatial connectivity matrix
xy = cbind(dat$lon, dat$lat)
xy
dat$X..HA.acc.nb...NA.acc.nb...longitude...latitude...date.
ha
## load data
dat = read.csv("H1N1_time_location_data.csv", package = "adegenet")       # package = "adegenet" unused.
## load data
dat = read.csv("H1N1_time_location_data.csv", header = T)       # package = "adegenet" unused.
dat$X.1
dat$longitude
## load data
dat = read.csv("H1N1_time_location_data.csv", header = T, delimiter = ;)       # package = "adegenet" unused.
## load data
dat = read.csv("H1N1_time_location_data.csv", sep= ";")       # package = "adegenet" unused.
## load data
dat = read.csv("H1N1_time_location_data.csv", sep= "";"")       # package = "adegenet" unused.
## load data
dat = read.csv("H1N1_time_location_data.csv", sep= ";")       # package = "adegenet" unused.
## load data
dat = read.csv("H1N1_time_location_data.csv", sep= ";", header = T)       # package = "adegenet" unused.
## load data
dat = read.csv("H1N1_time_location_data.csv", sep= ";", header = T)       # package = "adegenet" unused.
View(dat)
## load data
dat = read.csv("H1N1_temporospatial.csv", sep= ";", header = T)       # package = "adegenet" unused.
## load data
dat = read.csv("H1N1_temporospatial.csv", sep= ";", header = T)       # package = "adegenet" unused.
ha  = read.dna("H1N1_HA_sequences.txt", format="fa")
na  = read.dna("H1N1_NA_sequences.txt", format="fa")
## load data
datt = read.csv("H1N1_temporospatial.csv", sep= ";", header = T)       # package = "adegenet" unused.
View(datt)
## load data
dat = read.csv("H1N1_temporospatial.csv", sep= ";", header = T)       # package = "adegenet" unused.
ha  = read.dna("H1N1_HA_sequences.txt", format="fa")
library(adegenet)
library(ape)
## load data
dat = read.csv("H1N1_temporospatial.csv", sep= ";", header = T)       # package = "adegenet" unused.
ha  = read.dna("H1N1_HA_sequences.txt", format="fa")
View(dat)
## load data
dat = read.csv("H1N1_temporospatial.csv", sep= ",", header = T)       # package = "adegenet" unused.
ha  = read.dna("H1N1_HA_sequences.txt", format="fa")
na  = read.dna("H1N1_NA_sequences.txt", format="fa")
## computing nucleotide distances
# to calculate raw pairwise genetic distances between isolates,
# ape package can be used (dist.dna)
nbNucleotide = ncol(as.matrix(ha)) + ncol(as.matrix(na))
distances    = dist.dna(ha, model = "raw")*ncol(as.matrix(ha)) +
dist.dna(na, model = "raw")*ncol(as.matrix(na))
distances    = round(as.matrix(distances))
## spatial connectivity matrix
xy = cbind(dat$lon, dat$lat) # currently there are issues with how the csv file is loaded and read
temp = as.matrix(dist(xy))
M = 1 * (temp < 1e-10)
## SEQTRACK!
mu1 = 0.00502/365
dat$date = as.POSIXct(dat$date)
results  = seqTrack(distances, rownames(dat), dat$date, prox.mat=M, mu=mu1, haplo.le = nbNucleotide)
## Genetic likelihood
p = get.likelihood(results, mu=mu1, hapl.length=nbNucleotide)
## Genetic likelihood
p = get.likelihood(results, mu=mu1, haplo.length=nbNucleotide)
head(results)
tail(results)
range(results$weight, na.rm=TRUE)
barplot(table(results$weight)/sum(!is.na(results$weight)), ylab="Frequency",
xlab="Mutations between inferred ancestor and descendent", col="orange")
# load fake_outbreak data
data(fake_outbreak)
library(outbreaker2)
# load fake_outbreak data
data(fake_outbreak)
force(fake_outbreak)
# load fake_outbreak data
# is a dataset of 30 separate DNA sequences of length 10000
data(fake_outbreak)
# load fake_outbreak data
# is a dataset of 30 separate DNA sequences of length 10000
fakeOutbreak = data(fake_outbreak)
a
dnaSeq = as.matrix(fake_outbreak$dna)
# data that can be used from this fake outbreak
sampleId = as.matrix(fake_outbreak$sample)
sampleId
# data that can be used from this fake outbreak
sample = as.matrix(fake_outbreak$sample)
dnaSeq = as.matrix(fake_outbreak$dna)
onset = as.matrix(fake_outbreak$onset)
w = fake_outbreak$w
ances = fake_outbreak$ances
cdt = fake_outbreak$cdt
load("~/Documents/GitHub/outbreak_trace/datasets/simulated_datasets/fakeOutbreak.1.RData")
load("~/Documents/GitHub/outbreak_trace/datasets/simulated_datasets/sim.unif.1.RData")
setwd("~/Documents/GitHub/outbreak_trace/datasets/simulated_datasets")
write.csv(fake_outbreak, "/datasets/simulated_datasets/fake_outbreak.csv", row.names = FALSE)
View(fake_outbreak)
fake_outbreak[["dna"]]
fake_outbreak$dna
fake_outbreak$dna[1]
fake_outbreak$dna[:,1]
fake_outbreak$dna[1,]
fake_outbreak$dna[,1]
View(mySim)
View(mySim)
fake_outbreak
write.dna(fake_outbreak$dna, file = 'fake_outbreak.fasta', format = 'fasta')
write.dna(fake_outbreak$dna, file = 'fake_outbreak.fasta', format = 'fasta')
# goal: convert these data frames into CSV files to run with
library(ape)
write.dna(fake_outbreak$dna, file = 'fake_outbreak.fasta', format = 'fasta')
write.dna(mySim$seq, file = 'random_diffusion.fasta', format = 'fasta')
library(adegenet)
library(ape)
## load data
setwd("~/Documents/GitHub/outbreak_trace/datasets/simulated_datasets")
load('fakeOutbreak.1.RData') # named fake_outbreak
load('sim.unif.1.RData')     # named mySim
## computing nucleotide distances
# to calculate raw pairwise genetic distances between isolates,
# ape package can be used (dist.dna)
nbNucleotide = ncol(as.matrix(fake_outbreak$dna))
distances    = dist.dna(fake_outbreak$dna, model = "raw")*ncol(as.matrix(fake_outbreak$dna))
distances    = round(as.matrix(distances))
## SEQTRACK!
mu1 = 0.00502/365
dat$date = as.POSIXct(fake_outbreak$onset, tz = "GMT") # origin must be supplied ???
library(zoo)
library("zoo")
fake_outbreak$onset = as.POSIXct(as.Date(fake_outbreak$onset)) # origin must be supplied ???
fake_outbreak$date = as.POSIXct(as.Date(fake_outbreak$onset), origin = "1970-01-01") # origin must be supplied ???
fake_outbreak$date = as.POSIXct(as.Date(fake_outbreak$onset, origin = "1970-01-01") # origin must be supplied ???
fake_outbreak$date = as.POSIXct(as.Date(fake_outbreak$onset, origin = "1970-01-01")) # origin must be supplied ???
fake_outbreak$date = as.POSIXct(as.Date(fake_outbreak$onset, origin = "1970-01-01")) # origin must be supplied ???
fake_outbreak_results  = seqTrack(distances, rownames(fake_outbreak), fake_outbreak$date, prox.mat= NULL, mu=mu1, haplo.le = nbNucleotide)
fake_outbreak_results  = seqTrack(distances, rownames(fake_outbreak), fake_outbreak$onset, prox.mat= NULL, mu=mu1, haplo.le = nbNucleotide)
fake_outbreak$date
fake_outbreak$date = as.POSIXct(as.Date(fake_outbreak$onset, origin = "1970-01-01")) # origin must be supplied ???
fake_outbreak_results  = seqTrack(distances, rownames(fake_outbreak), fake_outbreak$dates, prox.mat= NULL, mu=mu1, haplo.le = nbNucleotide)
fake_outbreak$date = as.POSIXct(as.Date(fake_outbreak$onset, origin = "1970-01-01"))
fake_outbreak_results  = seqTrack(distances, rownames(fake_outbreak), fake_outbreak$dates, prox.mat= NULL, mu=mu1, haplo.le = nbNucleotide)
fake_outbreak$onset = as.POSIXct(as.Date(fake_outbreak$onset, origin = "1970-01-01"))
fake_outbreak_results  = seqTrack(distances, rownames(fake_outbreak), fake_outbreak$onset, prox.mat= NULL, mu=mu1, haplo.le = nbNucleotide)
seqTrack details
details seqTrack()
?as.POSIXct
## load data
setwd("~/Documents/GitHub/outbreak_trace/datasets/H1N1_dataset")
dat = read.csv("H1N1_temporospatial.csv", sep= ",", header = T)       # package = "adegenet" unused.
ha  = read.dna("H1N1_HA_sequences.txt", format="fa")
na  = read.dna("H1N1_NA_sequences.txt", format="fa")
dat$date = as.POSIXct(dat$date)
date$date
dat$date
fake_outbreak$onset = as.POSIXct(as.Date(fake_outbreak$onset, origin = "1970-01-01"))
fake_outbreak_results  = seqTrack(distances, rownames(fake_outbreak), fake_outbreak$onset, prox.mat= NULL, mu=mu1, haplo.le = nbNucleotide)
fake_outbreak$onset = as.POSIXct(as.Date(fake_outbreak$onset, origin = "1970-01-01"))
fake_outbreak_results  = seqTrack(distances, rownames(fake_outbreak), fake_outbreak$onset, prox.mat= NULL, mu=mu1, haplo.le = nbNucleotide)
# load fake_outbreak data
# is a dataset of 30 separate DNA sequences of length 10000
data(fake_outbreak)
dat = fake_outbreak
library(outbreaker2)
# load fake_outbreak data
# is a dataset of 30 separate DNA sequences of length 10000
data(fake_outbreak)
dat = fake_outbreak
# data that can be used from this fake outbreak
sample = as.matrix(fake_outbreak$sample) # dates of isolation
dnaSeq = as.matrix(fake_outbreak$dna) # (fake) pathogen genome sequences
onset = as.matrix(fake_outbreak$onset) # dates of onset
w = fake_outbreak$w # empirical distribution of generation time
ances = fake_outbreak$ances # true infectors (i.e. true ancestors)
ctd = fake_outbreak$ctd # contact tracing data
out = outbreaker(data = list(dna = dat$dna, dates = dat$onset, w_dens = dat$w),
config = list(n_iter = 2e4, sample_every = 200))
plot(out)
as.data.frame(out)
# requires loading simulated data into workspace (as found in outbreak_trace/datasets/)
dat2 = mySim
# w as found in dat
out2 = outbreaker(data = list(dna = dat2$seq, dates = dat2$dates, w_dens = dat$w),
config = list(n_iter = 2e4, sample_every = 200))
plot(out2)
# w as found in dat
out2 = outbreaker(data = list(dna = dat2$seq, dates = dat2$dates, w_dens = dat$w),
config = list(n_iter = 2e2, sample_every = 200))
plot(out2)
as.data.frame(out2)
# w as found in dat
out2 = outbreaker(data = list(dna = dat2$seq, dates = dat2$dates, w_dens = dat$w),
config = list(n_iter = 2e3, sample_every = 200))
plot(out2)
as.data.frame(out2)
fake_outbreak_results = as.data.frame(out)
random_diffusion = as.data.frame(out2)
summary(out)
fake_outbreak_table = summary(out)
random_diffusion_table = summary(out2)
View(random_diffusion_table)
random_diffusion_table = summary(out2)$tree
fake_outbreak_table = summary(out)$tree
write.csv(fake_outbreak_table, '~/Documents/GitHub/outbreak_trace/results/seqTrack/fake_outbreak_outbreaker2_results.csv')
write.csv(random_diffusion_table, '~/Documents/GitHub/outbreak_trace/results/seqTrack/random_diffusion_outbreaker2_results.csv')
library(adegenet)
library(ape)
## load data
setwd("~/Documents/GitHub/outbreak_trace/datasets/simulated_datasets")
load('fakeOutbreak.1.RData') # named fake_outbreak
load('sim.unif.1.RData')     # named mySim
## computing nucleotide distances
# to calculate raw pairwise genetic distances between isolates,
# ape package can be used (dist.dna)
nbNucleotide = ncol(as.matrix(fake_outbreak$dna))
distances    = dist.dna(fake_outbreak$dna, model = "raw")*ncol(as.matrix(fake_outbreak$dna))
distances    = round(as.matrix(distances))
## SEQTRACK!
mu1 = 0.00502/365
fake_outbreak$onset = as.POSIXct(as.Date(fake_outbreak$onset, origin = "1970-01-01"))
fake_outbreak_results  = seqTrack(distances, rownames(fake_outbreak), fake_outbreak$onset, prox.mat= NULL, mu=mu1, haplo.le = nbNucleotide)
write.csv(fake_outbreak_table, '~/Documents/GitHub/outbreak_trace/results/outbreaker2/fake_outbreak_outbreaker2_results.csv')
write.csv(random_diffusion_table, '~/Documents/GitHub/outbreak_trace/results/outbreaker2/random_diffusion_outbreaker2_results.csv')
fake_outbreak$ances
fake_outbreak_table
fake_outbreak$onset = as.POSIXct(fake_outbreak$onset, origin = "2010-01-01")
fake_outbreak_results  = seqTrack(distances, rownames(fake_outbreak), fake_outbreak$onset, prox.mat= NULL, mu=mu1, haplo.le = nbNucleotide)
dat$date = as.POSIXct(dat$date)
dat = read.csv("H1N1_temporospatial.csv", sep= ",", header = T)       # package = "adegenet" unused.
## load data
setwd("~/Documents/GitHub/outbreak_trace/datasets/H1N1_dataset")
dat = read.csv("H1N1_temporospatial.csv", sep= ",", header = T)       # package = "adegenet" unused.
ha  = read.dna("H1N1_HA_sequences.txt", format="fa")
na  = read.dna("H1N1_NA_sequences.txt", format="fa")
## computing nucleotide distances
# to calculate raw pairwise genetic distances between isolates,
# ape package can be used (dist.dna)
nbNucleotide = ncol(as.matrix(ha)) + ncol(as.matrix(na))
distances    = dist.dna(ha, model = "raw")*ncol(as.matrix(ha)) +
dist.dna(na, model = "raw")*ncol(as.matrix(na))
distances    = round(as.matrix(distances))
## spatial connectivity matrix
xy = cbind(dat$lon, dat$lat)
temp = as.matrix(dist(xy))
M = 1 * (temp < 1e-10)
## SEQTRACK!
mu1 = 0.00502/365
dat$date = as.POSIXct(dat$date)
results  = seqTrack(distances, rownames(dat), dat$date, prox.mat=M, mu=mu1, haplo.le = nbNucleotide)
results  = seqTrack(distances, rownames(dat), dat$date)# , prox.mat=M, mu=mu1, haplo.le = nbNucleotide)
results  = seqTrack(distances, rownames(dat), dat$date, prox.mat=NULL, mu=mu1, haplo.le = nbNucleotide)
fake_outbreak$onset = as.POSIXct(fake_outbreak$onset, origin = "2010-01-01")
fake_outbreak_results  = seqTrack(distances, rownames(fake_outbreak), fake_outbreak$onset, prox.mat= NULL, mu=mu1, haplo.le = nbNucleotide)
fake_outbreak$onset.length
fake_outbreak$onset
fake_outbreak$onset = as.POSIXct(fake_outbreak$onset, origin = "2010-01-01")
fake_outbreak$onset
dat$date
fake_outbreak$onset = as.POSIXct(fake_outbreak$onset, origin = "2010-01-01", "%Y-%m-%d")
fake_outbreak$onset
load('fakeOutbreak.1.RData') # named fake_outbreak
## load data
setwd("~/Documents/GitHub/outbreak_trace/datasets/simulated_datasets")
load('fakeOutbreak.1.RData') # named fake_outbreak
load('sim.unif.1.RData')     # named mySim
## computing nucleotide distances
# to calculate raw pairwise genetic distances between isolates,
# ape package can be used (dist.dna)
nbNucleotide = ncol(as.matrix(fake_outbreak$dna))
distances    = dist.dna(fake_outbreak$dna, model = "raw")*ncol(as.matrix(fake_outbreak$dna))
distances    = round(as.matrix(distances))
## SEQTRACK!
mu1 = 0.00502/365
fake_outbreak$onset = as.POSIXct(fake_outbreak$onset, origin = "2010-01-01", "%Y-%m-%d")
fake_outbreak_results  = seqTrack(distances, rownames(fake_outbreak), fake_outbreak$onset, prox.mat= NULL, mu=mu1, haplo.le = nbNucleotide)
fake_outbreak$onset = as.Date(as.POSIXct(fake_outbreak$onset, origin = "2010-01-01")
## load data
setwd("~/Documents/GitHub/outbreak_trace/datasets/simulated_datasets")
load('fakeOutbreak.1.RData') # named fake_outbreak
load('sim.unif.1.RData')     # named mySim
## computing nucleotide distances
# to calculate raw pairwise genetic distances between isolates,
# ape package can be used (dist.dna)
nbNucleotide = ncol(as.matrix(fake_outbreak$dna))
distances    = dist.dna(fake_outbreak$dna, model = "raw")*ncol(as.matrix(fake_outbreak$dna))
distances    = round(as.matrix(distances))
## SEQTRACK!
mu1 = 0.00502/365
fake_outbreak$onset = as.Date(as.POSIXct(fake_outbreak$onset, origin = "2010-01-01"))
## SEQTRACK!
mu1 = 0.00502/365
fake_outbreak$onset = as.Date(as.POSIXct(fake_outbreak$onset * 10000, origin = "2010-01-01"))
## load data
setwd("~/Documents/GitHub/outbreak_trace/datasets/simulated_datasets")
load('fakeOutbreak.1.RData') # named fake_outbreak
load('sim.unif.1.RData')     # named mySim
## computing nucleotide distances
# to calculate raw pairwise genetic distances between isolates,
# ape package can be used (dist.dna)
nbNucleotide = ncol(as.matrix(fake_outbreak$dna))
distances    = dist.dna(fake_outbreak$dna, model = "raw")*ncol(as.matrix(fake_outbreak$dna))
distances    = round(as.matrix(distances))
## SEQTRACK!
mu1 = 0.00502/365
fake_outbreak$onset = fake_outbreak$onset * 10000000;
fake_outbreak$onset = as.Date(as.POSIXct(fake_outbreak$onset, origin = "2010-01-01"))
fake_outbreak_results  = seqTrack(distances, rownames(fake_outbreak), fake_outbreak$onset, prox.mat= NULL, mu=mu1, haplo.le = nbNucleotide)
fake_outbreak$onset
## load data
setwd("~/Documents/GitHub/outbreak_trace/datasets/simulated_datasets")
load('fakeOutbreak.1.RData') # named fake_outbreak
load('sim.unif.1.RData')     # named mySim
## computing nucleotide distances
# to calculate raw pairwise genetic distances between isolates,
# ape package can be used (dist.dna)
nbNucleotide = ncol(as.matrix(fake_outbreak$dna))
distances    = dist.dna(fake_outbreak$dna, model = "raw")*ncol(as.matrix(fake_outbreak$dna))
distances    = round(as.matrix(distances))
## SEQTRACK!
mu1 = 0.00502/365
fake_outbreak$onset = fake_outbreak$onset * 86400;
fake_outbreak$onset = as.POSIXct(fake_outbreak$onset, origin = "2010-01-01"))
fake_outbreak$onset = as.POSIXct(fake_outbreak$onset, origin = "2010-01-01")
fake_outbreak_results  = seqTrack(distances, rownames(fake_outbreak), fake_outbreak$onset, prox.mat= NULL, mu=mu1, haplo.le = nbNucleotide)
fake_outbreak$onset
load('fakeOutbreak.1.RData') # named fake_outbreak
fake_outbreak$onset = fake_outbreak$onset * 86400;
fake_outbreak$onset = as.POSIXct(fake_outbreak$onset, origin = "2010-01-01", format = "%Y-%m-%d")
fake_outbreak$onset
fake_outbreak$onset = as.POSIXct(fake_outbreak$onset, origin = "2010-01-01", tz = "CDT" format = "%Y-%m-%d")
fake_outbreak$onset = as.POSIXct(fake_outbreak$onset, origin = "2010-01-01", tz = "CDT", format = "%Y-%m-%d")
fake_outbreak$onset
fake_outbreak$onset = as.POSIXct(fake_outbreak$onset, origin = "2010-05-01", tz = "CDT", format = "%Y-%m-%d")
fake_outbreak$onset
## load data
setwd("~/Documents/GitHub/outbreak_trace/datasets/simulated_datasets")
load('fakeOutbreak.1.RData') # named fake_outbreak
load('sim.unif.1.RData')     # named mySim
## computing nucleotide distances
# to calculate raw pairwise genetic distances between isolates,
# ape package can be used (dist.dna)
nbNucleotide = ncol(as.matrix(fake_outbreak$dna))
distances    = dist.dna(fake_outbreak$dna, model = "raw")*ncol(as.matrix(fake_outbreak$dna))
distances    = round(as.matrix(distances))
## SEQTRACK!
mu1 = 0.00502/365
fake_outbreak$onset = fake_outbreak$onset * 86400;
fake_outbreak$onset = as.POSIXct(fake_outbreak$onset, origin = "2010-05-01", tz = "CDT", format = "%Y-%m-%d")
fake_outbreak$onset
fake_outbreak_results  = seqTrack(distances, rownames(fake_outbreak), fake_outbreak$onset, prox.mat= NULL, mu=mu1, haplo.le = nbNucleotide)
fake_outbreak_results  = seqTrack(distances, rownames(fake_outbreak), fake_outbreak$onset, mu=mu1, haplo.le = nbNucleotide)
fake_outbreak_results  = seqTrack(distances, 1:30, fake_outbreak$onset, mu=mu1, haplo.le = nbNucleotide)
write.csv(fake_outbreak_results, '~/Documents/GitHub/outbreak_trace/results/seqTrack/fake_outbreak_seqTrack_results.csv')
nbNucleotide = ncol(as.matrix(mySim$seq))
distances    = dist.dna(mySim$seq, model = "raw")*ncol(as.matrix(mySim$seq))
distances    = round(as.matrix(distances))
mu1 = 0.00502/365
mySim$dates = mySim$dates * 86400;
mySim$dates = as.POSIXct(mySim$dates, origin = "2010-05-01", format = "%Y-%m-%d")
random_diffusion_results  = seqTrack(distances, 1:541, mySim$dates, mu=mu1, haplo.le = nbNucleotide)
write.csv(random_diffusion_results, '~/Documents/GitHub/outbreak_trace/results/seqTrack/random_diffusion_seqTrack_results.csv')
dat = read.csv("H1N1_temporospatial.csv", sep= ",", header = T)       # package = "adegenet" unused.
setwd("~/Documents/GitHub/outbreak_trace/datasets/simulated_datasets")
# requires loading simulated data into workspace (as found in outbreak_trace/datasets/)
load('sim.unif.1.RData')
distances    = round(as.matrix(distances))
h1n1 = cbind(ha, na)
w = fake_outbreak$w # empirical distribution of generation time
setwd("~/Documents/GitHub/outbreak_trace/datasets/simulated_datasets")
data(fake_outbreak)
dat = fake_outbreak
# H1N1 dataset
setwd("~/Documents/GitHub/outbreak_trace/datasets/H1N1_dataset")
dath1n1 = read.csv("H1N1_temporospatial.csv", sep= ",", header = T)       # package = "adegenet" unused.
ha  = read.dna("H1N1_HA_sequences.txt", format="fa")
na  = read.dna("H1N1_NA_sequences.txt", format="fa")
h1n1 = cbind(ha, na) # this will have fully known consequences, where the concatenated samples
# H1N1 dataset
setwd("~/Documents/GitHub/outbreak_trace/datasets/H1N1_dataset")
dath1n1 = read.csv("H1N1_temporospatial.csv", sep= ",", header = T)       # package = "adegenet" unused.
ha  = read.dna("H1N1_HA_sequences.txt", format="fa")
na  = read.dna("H1N1_NA_sequences.txt", format="fa")
h1n1 = cbind(ha, na) # this will have fully known consequences, where the concatenated samples
out3 = outbreaker(data = list(dna = h1n1, dates = dath1n1$date, w_dens = dat$dat),
config = list(n_iter = 2e3, sample_every = 200))
plot(out3)
h1n1_outbreaker = as.fata.frame(out3)
out3 = outbreaker(data = list(dna = h1n1, dates = dath1n1$date, w_dens = dat$dat),
config = list(n_iter = 2e3, sample_every = 200))
out3 = outbreaker(data = list(dna = h1n1, dates = h1n1$date, w_dens = dat$dat),
config = list(n_iter = 2e3, sample_every = 200))
dates = as.POSIXct.numeric(dath1n1$date)
dates = as.numeric(dath1n1$date)
dates = asPOSIXct(dath1n1$date)
dates = as.POSIXct(dath1n1$date)
dates = as.numeric(dates)
out3 = outbreaker(data = list(dna = h1n1, dates = dates, w_dens = dat$dat),
config = list(n_iter = 2e3, sample_every = 200))
out3 = outbreaker(data = list(dna = ha, dates = dates, w_dens = dat$dat),
config = list(n_iter = 2e3, sample_every = 200))
ha  = read.dna("H1N1_HA_sequences.txt", format="fa")
na  = read.dna("H1N1_NA_sequences.txt", format="fa")
h1n1 = cbind(ha, na) # this will have fully known consequences, where the concatenated samples
dates = as.POSIXct(dath1n1$date)
dates = as.numeric(dates)
out3 = outbreaker(data = list(dna = ha, dates = dates, w_dens = dat$dat),
config = list(n_iter = 2e3, sample_every = 200))
ha
dath1n1$date = as.POSIXct(dath1n1$date)
dath1n1$date = as.numeric(dath1n1$date)
out3 = outbreaker(data = list(dna = ha, dates = dath1n1$date, w_dens = dat$dat),
config = list(n_iter = 2e3, sample_every = 200))
out3 = outbreaker(data = list(dna = ha,  w_dens = dat$dat),
config = list(n_iter = 2e3, sample_every = 200))
library(ape)
dath1n1 = read.csv("H1N1_temporospatial.csv", sep= ",", header = T)       # package = "adegenet" unused.
ha  = read.dna("H1N1_HA_sequences.txt", format="fa")
na  = read.dna("H1N1_NA_sequences.txt", format="fa")
h1n1 = cbind(ha, na) # this will have fully known consequences, where the concatenated samples
dath1n1$date = as.POSIXct(dath1n1$date)
dath1n1$date = as.numeric(dath1n1$date)
out3 = outbreaker(data = list(dna = ha, dath1n1$date, w_dens = dat$dat), #err: DNA sequence labels don't match case ids.
config = list(n_iter = 2e3, sample_every = 200))
plot(out3)
