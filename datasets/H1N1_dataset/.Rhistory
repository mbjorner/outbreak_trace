## MAKE SIMULATION
mySim <- haploGen(seq.length =SEQLENGTH, t.max=TMAX, mu.transi =TXMUT,
gen.time=function(){rnorm(1, GENTIME, GENTIME.SD)},
repro = function(){rnorm(1, REPRO, REPRO.SD)},
max.nb.haplo = MAXNBSEQ, lambda.xy=DISP, grid.size=5,
ini.n=INI.N)
} # end while
save(mySim, file=paste("sim.unif", simIdx, "RData", sep="."))
## GET SAMPLES
for(sampIdx in 1:NBSAMP){
mySamp <- sample.haploGen(mySim, SAMPSIZE, rDate=rpois,
arg.rDate=list(lambda=1))
fileName <- paste("sim.unif", simIdx, sampIdx, "RData", sep=".")
save(mySamp, file=fileName)
}
}
#### SIM 2: STRUCTURED DISPERSAL ####
## PARAMETERS, RANDOM DIFFUSION
SEQLENGTH <- 5000
#### SIM 2: STRUCTURED DISPERSAL ####
## PARAMETERS, RANDOM DIFFUSION
SEQLENGTH <- 5000
TXMUT <- .008
GENTIME <- 5
GENTIME.SD <- 1
REPRO <- 1.2
REPRO.SD <- .5
TMAX <- 100
MAXNBSEQ <- 2000
DISP <- 0.3
GRID <- matrix(1:25,ncol=5)
GRID
INI.N <- 10
INI.XY <- c(2,2)
DISPMAT <- matrix(0,ncol=25,nrow=25)
diag(DISPMAT) <- 1
## puits
DISPMAT[c(13,14,15,18,20,23,24,25),-19] <- 0
DISPMAT[c(13,14,15,18,20,23,24,25),19] <- 0.7 # apport puits
DISPMAT[c(13,14,15,18,20,23,24,25) , c(13,14,15,18,20,23,24,25)] <- 0.3
DISPMAT[19,] <- 0.01
DISPMAT[19,19] <- 0.96 # diffusion puits = 0
## source
DISPMAT[c(1,6,11,2,12),-7] <- 0 # apport pour la source
DISPMAT[c(1,6,11,2,12),7] <- 0.95
DISPMAT[c(1,6,11,2,12),c(1,6,11,2,12)] <- 0.05
DISPMAT[7, ] <- 0 # diffusion depuis la source
DISPMAT[7, c(4,5,10,15,20,21,22,23,24)] <- 1/9
## misc points with immediate neighbour connectivity
DISPMAT[3, c(2,8,4)] <- DISP/3 # 3
DISPMAT[3,3] <- 1-DISP
DISPMAT[4, c(3,5,9)] <- DISP/3 # 4
DISPMAT[4,4] <- 1-DISP
DISPMAT[5, c(4,9,10)] <- DISP/3 # 5
DISPMAT[5,5] <- 1-DISP
DISPMAT[9, c(4,8,10,14)] <- DISP/4 # 9
DISPMAT[9,9] <- 1-DISP
DISPMAT[10, c(5,9,15)] <- DISP/3 # 10
DISPMAT[10,10] <- 1-DISP
DISPMAT[16, c(11,12,17,21,22)] <- DISP/5 # 16
DISPMAT[16,16] <- 1-DISP
DISPMAT[17, c(18,12)] <- DISP/2 # 17
DISPMAT[17,17] <- 1-DISP
DISPMAT[21, c(16,17,22)] <- DISP/3 # 21
DISPMAT[21,21] <- 1-DISP
DISPMAT[22, c(17,18,23)] <- DISP/3 #
DISPMAT[22,22] <- 1-DISP
## DISPMAT[, c(,,)] <- .2/3 #
## DISPMAT[,] <- 0.8
## DISPMAT[, c(,,)] <- .2/3 #
## DISPMAT[,] <- 0.8
## DISPMAT[, c(,,)] <- .2/3 #
## DISPMAT[,] <- 0.8
## DISPMAT[, c(,,)] <- .2/3 #
## DISPMAT[,] <- 0.8
DISPMAT <- prop.table(DISPMAT,1)
NBSIM <- 10
9
NBSIM <- 10
NBSAMP <- 10
SAMPSIZE <- 800
## SIMULATE DATA ##
for(simIdx in 1:NBSIM){
mySim <- list(ances=NA) # initialization
while(sum(!is.na(mySim$ances)) < 500){
## MAKE SIMULATION
mySim <- haploGen(seq.le=SEQLENGTH, Tmax=TMAX, mu=TXMUT,
mean.gen=GENTIME, sd.gen=GENTIME.SD,
mean.repr=REPRO, sd.repro=REPRO.SD,
max.nb=MAXNBSEQ, grid.size=5, matConnect=DISPMAT,
ini.n=INI.N, ini.xy=INI.XY)
} # end while
save(mySim, file=paste("sim.stru", simIdx, "RData", sep="."))
## GET SAMPLES
for(sampIdx in 1:NBSAMP){
mySamp <- sample.haploGen(mySim, SAMPSIZE, rDate=rpois,
arg.rDate=list(lambda=1))
fileName <- paste("sim.stru", simIdx, sampIdx, "RData", sep=".")
save(mySamp, file=fileName)
}
}
## TO VISUALIZE THE LATEST DATASET ##
plotHaploGen(mySamp)
## SIMULATE DATA ##
for(simIdx in 1:NBSIM){
mySim <- list(ances=NA) # initialization
while(sum(!is.na(mySim$ances)) < 500){
## MAKE SIMULATION
mySim <- haploGen(seq.le=SEQLENGTH, Tmax=TMAX, mu=TXMUT,
mean.gen=GENTIME, sd.gen=GENTIME.SD,
mean.repr=REPRO, sd.repro=REPRO.SD,
max.nb=MAXNBSEQ, grid.size=5, matConnect=DISPMAT,
ini.n=INI.N, ini.xy=INI.XY)
} # end while
save(mySim, file=paste("sim.stru", simIdx, "RData", sep="."))
## GET SAMPLES
for(sampIdx in 1:NBSAMP){
mySamp <- sample.haploGen(mySim, SAMPSIZE, rDate=rpois,
arg.rDate=list(lambda=1))
fileName <- paste("sim.stru", simIdx, sampIdx, "RData", sep=".")
save(mySamp, file=fileName)
}
}
## TO VISUALIZE THE LATEST DATASET ##
plotHaploGen(mySamp)
## LIBRARY ##
library(MASS)
library(adegenet) # must be the devel version
library(ape)
## PARAMETERS FOR RANDOM DIFFUSION
SEQLENGTH <- 5000
TXMUT <- .008
GENTIME <- 5
GENTIME.SD <- 1
REPRO <- 1.2
REPRO.SD <- .5
TMAX <- 100
MAXNBSEQ <- 2000
DISP <- 0.3
GRID <- matrix(1:25,ncol=5)
GRID
NBSIM <- 10
NBSAMP <- 10
SAMPSIZE <- 800
INI.N <- 10
## SIMULATE DATA ##
for(simIdx in 1:NBSIM){
mySim <- list(ances=NA) # initialization
while(sum(!is.na(mySim$ances)) < 500){
## MAKE SIMULATION
mySim <- haploGen(seq.length = SEQLENGTH, t.max=TMAX, mu.transi =TXMUT,
gen.time=function(){rnorm(1, GENTIME, GENTIME.SD)},
repro = function(){rnorm(1, REPRO, REPRO.SD)},
max.nb.haplo = MAXNBSEQ, lambda.xy=DISP, grid.size=5,
ini.n=INI.N)
} # end while
save(mySim, file=paste("sim.unif", simIdx, "RData", sep="."))
## GET SAMPLES
for(sampIdx in 1:NBSAMP){
mySamp <- sample.haploGen(mySim, SAMPSIZE, rDate=rpois,
arg.rDate=list(lambda=1))
fileName <- paste("sim.unif", simIdx, sampIdx, "RData", sep=".")
save(mySamp, file=fileName)
}
}
## SIMULATE DATA ##
for(simIdx in 1:NBSIM){
mySim <- list(ances=NA) # initialization
while(sum(!is.na(mySim$ances)) < 500){
## MAKE SIMULATION
mySim <- haploGen(seq.length = SEQLENGTH, t.max=TMAX, mu.transi =TXMUT,
gen.time=function(){rnorm(1, GENTIME, GENTIME.SD)},
repro = function(){rnorm(1, REPRO, REPRO.SD)},
max.nb.haplo = MAXNBSEQ, lambda.xy=DISP, grid.size=5,
ini.n=INI.N)
} # end while
save(mySim, file=paste("sim.unif", simIdx, "RData", sep="."))
## GET SAMPLES
for(sampIdx in 1:NBSAMP){
mySamp <- sample.haploGen(mySim, SAMPSIZE) # rDate=rpois,
#arg.rDate=list(lambda=1))
fileName <- paste("sim.unif", simIdx, sampIdx, "RData", sep=".")
save(mySamp, file=fileName)
}
}
## LIBRARY ##
library(MASS)
library(adegenet) # must be the devel version
library(ape)
## PARAMETERS FOR RANDOM DIFFUSION
SEQLENGTH <- 5000
TXMUT <- .008
GENTIME <- 5
GENTIME.SD <- 1
REPRO <- 1.2
REPRO.SD <- .5
TMAX <- 100
MAXNBSEQ <- 2000
DISP <- 0.3
GRID <- matrix(1:25,ncol=5)
GRID
NBSIM <- 10
NBSAMP <- 10
SAMPSIZE <- 800
INI.N <- 10
## SIMULATE DATA ##
for(simIdx in 1:NBSIM){
mySim <- list(ances=NA) # initialization
while(sum(!is.na(mySim$ances)) < 500){
## MAKE SIMULATION
mySim <- haploGen(seq.length = SEQLENGTH, t.max=TMAX, mu.transi =TXMUT,
gen.time=function(){rnorm(1, GENTIME, GENTIME.SD)},
repro = function(){rnorm(1, REPRO, REPRO.SD)},
max.nb.haplo = MAXNBSEQ, lambda.xy=DISP, grid.size=5,
ini.n=INI.N)
} # end while
save(mySim, file=paste("sim.unif", simIdx, "RData", sep="."))
## GET SAMPLES
for(sampIdx in 1:NBSAMP){
mySamp <- sample.haploGen(mySim, SAMPSIZE) # rDate=rpois,
#arg.rDate=list(lambda=1))
fileName <- paste("sim.unif", simIdx, sampIdx, "RData", sep=".")
save(mySamp, file=fileName)
}
}
load("/Users/bjorner/sim.unif.1.RData")
View(mySim)
mySim[["dates"]]
save(fake_outbreak, file=paste("fakeOutbreak", simIdx, "RData", sep="."))
load("/Users/bjorner/fakeOutbreak.1.RData")
View(fake_outbreak)
load("~/fakeOutbreak.1.RData")
View(fake_outbreak)
load("~/sim.unif.1.RData")
## load data
dat = read.csv("H1N1_temporospatial.csv", sep= ",", header = T)       # package = "adegenet" unused.
## load data
dat = read.csv("outbreak_trace/datasets/H1N1_dataset/H1N1_temporospatial.csv", sep= ",", header = T)       # package = "adegenet" unused.
## load data
dat = read.csv("/outbreak_trace/datasets/H1N1_dataset/H1N1_temporospatial.csv", sep= ",", header = T)       # package = "adegenet" unused.
## load data
dat = read.csv("/outbreak_trace/datasets/H1N1 dataset/H1N1_temporospatial.csv", sep= ",", header = T)       # package = "adegenet" unused.
## load data
dat = read.csv("/outbreak_trace/datasets/H1N1_dataset/H1N1_temporospatial.csv", sep= ",", header = T)       # package = "adegenet" unused.
## load data
dat = read.csv("~Documents/Github/outbreak_trace/datasets/H1N1_dataset/H1N1_temporospatial.csv", sep= ",", header = T)       # package = "adegenet" unused.
ha  = read.dna("H1N1_HA_sequences.txt", format="fa")
library(adegenet)
library(ape)
## load data
dat = read.csv("~Documents/Github/outbreak_trace/datasets/H1N1_dataset/H1N1_temporospatial.csv", sep= ",", header = T)       # package = "adegenet" unused.
setwd("~/Documents/GitHub/outbreak_trace/datasets/H1N1_dataset")
dat = read.csv("H1N1_temporospatial.csv", sep= ",", header = T)       # package = "adegenet" unused.
ha  = read.dna("H1N1_HA_sequences.txt", format="fa")
na  = read.dna("H1N1_NA_sequences.txt", format="fa")
## computing nucleotide distances
# to calculate raw pairwise genetic distances between isolates,
# ape package can be used (dist.dna)
nbNucleotide = ncol(as.matrix(ha)) + ncol(as.matrix(na))
distances    = dist.dna(ha, model = "raw")*ncol(as.matrix(ha)) +
dist.dna(na, model = "raw")*ncol(as.matrix(na))
distances    = round(as.matrix(distances))
## spatial connectivity matrix
xy = cbind(dat$lon, dat$lat)
temp = as.matrix(dist(xy))
M = 1 * (temp < 1e-10)
## SEQTRACK!
mu1 = 0.00502/365
dat$date = as.POSIXct(dat$date)
results  = seqTrack(distances, rownames(dat), dat$date, prox.mat=M, mu=mu1, haplo.le = nbNucleotide)
## Genetic likelihood
p = get.likelihood(results, mu=mu1, haplo.length=nbNucleotide)
head(results)
tail(results)
range(results$weight, na.rm=TRUE)
barplot(table(results$weight)/sum(!is.na(results$weight)), ylab="Frequency",
xlab="Mutations between inferred ancestor and descendent", col="orange")
if(require(maps)){
myMonth <- as.POSIXct(
c("2009-02-01", "2009-03-01","2009-04-01","2009-05-01","2009-06-01","2009-07-01"))
x.month <-  as.integer(difftime(myMonth, as.POSIXct("2009-01-21"), unit="day"))
if(require(maps)){
myDates <- as.integer(difftime(dat$date, as.POSIXct("2009-01-21"), unit="day"))
myMonth <- as.POSIXct(
c("2009-02-01", "2009-03-01","2009-04-01","2009-05-01","2009-06-01","2009-07-01"))
x.month <-  as.integer(difftime(myMonth, as.POSIXct("2009-01-21"), unit="day"))
## FIRST STAGE:
## SPREAD TO THE USA AND CANADA
curRange <- as.POSIXct(c("2009-03-29","2009-04-25"))
par(bg="deepskyblue")
map("world", fill=TRUE, col="grey")
opal <- palette()
palette(rev(heat.colors(10)))
plotSeqTrack(res, round(xy), add=TRUE,annot=FALSE,lwd=2,date.range=curRange,
col=res$weight+1)
title(paste(curRange, collapse=" to "))
legend("bottom", lty=1, leg=0:8, title="number of mutations", col=1:9,
lwd=2, horiz=TRUE)
## SECOND STAGE:
## SPREAD WITHIN AMERICA, FIRST SEEDING OUTSIDE AMERICA
curRange <- as.POSIXct(c("2009-04-30","2009-05-07"))
par(bg="deepskyblue")
map("world", fill=TRUE, col="grey")
opal <- palette()
palette(rev(heat.colors(10)))
plotSeqTrack(res, round(xy), add=TRUE,annot=FALSE,lwd=2,
date.range=curRange, col=res$weight+1)
title(paste(curRange, collapse=" to "))
legend("bottom", lty=1, leg=0:8, title="number of mutations",
col=1:9,lwd=2, horiz=TRUE)
## THIRD STAGE:
## PANDEMIC
curRange <- as.POSIXct(c("2009-05-15","2009-05-25"))
par(bg="deepskyblue")
map("world", fill=TRUE, col="grey")
opal <- palette()
palette(rev(heat.colors(10)))
plotSeqTrack(res, round(xy), add=TRUE,annot=FALSE,lwd=2, date.range=curRange,
col=res$weight+1)
title(paste(curRange, collapse=" to "))
legend("bottom", lty=1, leg=0:8, title="number of mutations",
col=1:9,lwd=2, horiz=TRUE)
}
if(require(maps)){
myDates <- as.integer(difftime(dat$date, as.POSIXct("2009-01-21"), unit="day"))
myMonth <- as.POSIXct(
c("2009-02-01", "2009-03-01","2009-04-01","2009-05-01","2009-06-01","2009-07-01"))
x.month <-  as.integer(difftime(myMonth, as.POSIXct("2009-01-21"), unit="day"))
## FIRST STAGE:
## SPREAD TO THE USA AND CANADA
curRange <- as.POSIXct(c("2009-03-29","2009-04-25"))
par(bg="deepskyblue")
map("world", fill=TRUE, col="grey")
opal <- palette()
palette(rev(heat.colors(10)))
plotSeqTrack(res, round(xy), add=TRUE,annot=FALSE,lwd=2,date.range=curRange,
col=res$weight+1)
title(paste(curRange, collapse=" to "))
legend("bottom", lty=1, leg=0:8, title="number of mutations", col=1:9,
lwd=2, horiz=TRUE)
## SECOND STAGE:
## SPREAD WITHIN AMERICA, FIRST SEEDING OUTSIDE AMERICA
curRange <- as.POSIXct(c("2009-04-30","2009-05-07"))
par(bg="deepskyblue")
map("world", fill=TRUE, col="grey")
opal <- palette()
palette(rev(heat.colors(10)))
plotSeqTrack(res, round(xy), add=TRUE,annot=FALSE,lwd=2,
date.range=curRange, col=res$weight+1)
title(paste(curRange, collapse=" to "))
legend("bottom", lty=1, leg=0:8, title="number of mutations",
col=1:9,lwd=2, horiz=TRUE)
## THIRD STAGE:
## PANDEMIC
curRange <- as.POSIXct(c("2009-05-15","2009-05-25"))
par(bg="deepskyblue")
map("world", fill=TRUE, col="grey")
opal <- palette()
palette(rev(heat.colors(10)))
plotSeqTrack(res, round(xy), add=TRUE,annot=FALSE,lwd=2, date.range=curRange,
col=res$weight+1)
title(paste(curRange, collapse=" to "))
legend("bottom", lty=1, leg=0:8, title="number of mutations",
col=1:9,lwd=2, horiz=TRUE)
}
myDates <- as.integer(difftime(dat$date, as.POSIXct("2009-01-21"), unit="day"))
myMonth <- as.POSIXct(
c("2009-02-01", "2009-03-01","2009-04-01","2009-05-01","2009-06-01","2009-07-01"))
x.month <-  as.integer(difftime(myMonth, as.POSIXct("2009-01-21"), unit="day"))
## FIRST STAGE:
## SPREAD TO THE USA AND CANADA
curRange <- as.POSIXct(c("2009-03-29","2009-04-25"))
par(bg="deepskyblue")
map("world", fill=TRUE, col="grey")
opal <- palette()
palette(rev(heat.colors(10)))
plotSeqTrack(res, round(xy), add=TRUE,annot=FALSE,lwd=2,date.range=curRange,
col=res$weight+1)
title(paste(curRange, collapse=" to "))
legend("bottom", lty=1, leg=0:8, title="number of mutations", col=1:9,
lwd=2, horiz=TRUE)
## SECOND STAGE:
## SPREAD WITHIN AMERICA, FIRST SEEDING OUTSIDE AMERICA
curRange <- as.POSIXct(c("2009-04-30","2009-05-07"))
par(bg="deepskyblue")
map("world", fill=TRUE, col="grey")
opal <- palette()
palette(rev(heat.colors(10)))
plotSeqTrack(res, round(xy), add=TRUE,annot=FALSE,lwd=2,
date.range=curRange, col=res$weight+1)
title(paste(curRange, collapse=" to "))
legend("bottom", lty=1, leg=0:8, title="number of mutations",
col=1:9,lwd=2, horiz=TRUE)
## THIRD STAGE:
## PANDEMIC
curRange <- as.POSIXct(c("2009-05-15","2009-05-25"))
par(bg="deepskyblue")
map("world", fill=TRUE, col="grey")
opal <- palette()
palette(rev(heat.colors(10)))
plotSeqTrack(res, round(xy), add=TRUE,annot=FALSE,lwd=2, date.range=curRange,
col=res$weight+1)
title(paste(curRange, collapse=" to "))
legend("bottom", lty=1, leg=0:8, title="number of mutations",
col=1:9,lwd=2, horiz=TRUE)
end
}
results
g = plot(results, main = "SeqTrack reconstruction of the H1N1 outbreak")
mtext(side = 3, text = "read: no/few mutations; grey: many mutations")
head(results)
tail(results)
range(results$weight, na.rm=TRUE)
barplot(table(results$weight)/sum(!is.na(results$weight)), ylab="Frequency",
xlab="Mutations between inferred ancestor and descendent", col="orange")
setwd("~/Documents/GitHub/outbreak_trace/datasets/simulated_datasets")
dat = load('fakeOutbreak.1.RData')
## load data
setwd("~/Documents/GitHub/outbreak_trace/datasets/simulated_datasets")
dat = load('fakeOutbreak.1.RData')
View(fake_outbreak)
load('fakeOutbreak.1.RData')
load('sim.unif.1.RData')
## computing nucleotide distances
# to calculate raw pairwise genetic distances between isolates,
# ape package can be used (dist.dna)
nbNucleotide = ncol(as.matrix(fake_outbreak$dna))
distances    = dist.dna(ha, model = "raw")*ncol(as.matrix(fake_outbreak$dna)) +
distances    = round(as.matrix(distances))
## computing nucleotide distances
# to calculate raw pairwise genetic distances between isolates,
# ape package can be used (dist.dna)
nbNucleotide = ncol(as.matrix(fake_outbreak$dna))
distances    = dist.dna(ha, model = "raw")*ncol(as.matrix(fake_outbreak$dna)) +
distances    = round(as.matrix(distances))
library(adegenet)
library(ape)
## computing nucleotide distances
# to calculate raw pairwise genetic distances between isolates,
# ape package can be used (dist.dna)
nbNucleotide = ncol(as.matrix(fake_outbreak$dna))
distances    = dist.dna(ha, model = "raw")*ncol(as.matrix(fake_outbreak$dna)) +
distances    = round(as.matrix(distances))
distances    = dist.dna(ha, model = "raw")*ncol(as.matrix(fake_outbreak$dna))
distances    = dist.dna(fake_outbreak$dna, model = "raw")*ncol(as.matrix(fake_outbreak$dna))
distances    = round(as.matrix(distances))
## spatial connectivity matrix
xy = cbind(dat$lon, dat$lat)
temp = as.matrix(dist(xy))
M = 1 * (temp < 1e-10)
## SEQTRACK!
mu1 = 0.00502/365
dat$date = as.POSIXct(dat$date)
dat$date = as.POSIXct(fake_outbreak$onset)
seqTrack(
dat$date = as.POSIXct(fake_outbreak$onset)
results  = seqTrack(distances, rownames(fake_outbreak), fake_outbreak$onset, prox.mat= NULL, mu=NULL, haplo.le = nbNucleotide)
fake_outbreak$ctd
## SEQTRACK!
mu1 = 0.00502/365
dat$date = as.POSIXct(fake_outbreak$onset)
View(mySim)
dat$date = as.POSIXct(fake_outbreak$onset)
dat$date = as.POSIXct(fake_outbreak$onset, tz = "GMT")
# save dataframe to file
write.csv(results, '~/Documents/GitHub/outbreak_trace/results/seqTrack/H1N1_seqTrack_results.csv')
library(adegenet)
library(ape)
## load data
setwd("~/Documents/GitHub/outbreak_trace/datasets/H1N1_dataset")
dat = read.csv("H1N1_temporospatial.csv", sep= ",", header = T)       # package = "adegenet" unused.
ha  = read.dna("H1N1_HA_sequences.txt", format="fa")
na  = read.dna("H1N1_NA_sequences.txt", format="fa")
## computing nucleotide distances
# to calculate raw pairwise genetic distances between isolates,
# ape package can be used (dist.dna)
nbNucleotide = ncol(as.matrix(ha)) + ncol(as.matrix(na))
distances    = dist.dna(ha, model = "raw")*ncol(as.matrix(ha)) +
dist.dna(na, model = "raw")*ncol(as.matrix(na))
distances    = round(as.matrix(distances))
## spatial connectivity matrix
xy = cbind(dat$lon, dat$lat)
temp = as.matrix(dist(xy))
M = 1 * (temp < 1e-10)
## SEQTRACK!
mu1 = 0.00502/365
dat$date = as.POSIXct(dat$date)
results  = seqTrack(distances, rownames(dat), dat$date, prox.mat=M, mu=mu1, haplo.le = nbNucleotide)
# save dataframe to file
write.csv(results, '~/Documents/GitHub/outbreak_trace/results/seqTrack/H1N1_seqTrack_results.csv')
# load fake_outbreak data
# is a dataset of 30 separate DNA sequences of length 10000
data(fake_outbreak)
dat = fake_outbreak
# data that can be used from this fake outbreak
sample = as.matrix(fake_outbreak$sample) # dates of isolation
dnaSeq = as.matrix(fake_outbreak$dna) # (fake) pathogen genome sequences
onset = as.matrix(fake_outbreak$onset) # dates of onset
w = fake_outbreak$w # empirical distribution of generation time
ances = fake_outbreak$ances # true infectors (i.e. true ancestors)
ctd = fake_outbreak$ctd # contact tracing data
out = outbreaker(data = list(dna = dat$dna, dates = dat$onset, w_dens = dat$w),
config = list(n_iter = 2e4, sample_every = 200))
plot(out)
as.data.frame(out)
# requires loading simulated data into workspace
dat2 = mySim
out2 = outbreaker(data = list(dna = dat2$seq, dates = dat2$dates, w_dens = dat2$w),
config = list(n_iter = 2e4, sample_every = 200))
out2 = outbreaker(data = list(dna = dat2$seq, dates = dat2$dates, w_dens = dat$w),
config = list(n_iter = 2e4, sample_every = 200))
library(outbreaker2)
